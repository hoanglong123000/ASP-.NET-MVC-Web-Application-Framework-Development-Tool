@using DBServer.Entities
@using Service.Core.Components
@using Service.Utility.Components
@using Service.Utility.Variables
@model  Service.Education.Executes.Clothesmn.SoldCoupons.SoldCouponViewModel


@{
   @* var groupSize = ViewData["SizeList"] as List<BaseItem>;

    var groupType = new List<TypeClothe>();
    using (var l = new DBServer.Entities.ServerDBContext())
    {
        groupType = l.TypeClothes.Where(x => x.Status >= 0).ToList();
    }


    var groupBrand = new List<Brand>();
    using (var l = new DBServer.Entities.ServerDBContext())
    {
        groupBrand = l.Brands.Where(x => x.Status >= 0).ToList();
    }*@

    var groupStatus = ViewData["StatusList"] as List<BaseItem>;
    var groupShoppingMethods = ViewData["ShopTable"] as List<BaseItem>;


}

<script>
    
</script>




<form id="SoldCouponForm" class="form form-horizontal">

    <input type="hidden" name="Id" value="@Model.Id" />

    <div class="row">
        <div class="col-md-6">

            @AppHelper.InputInline(new ControlAttribute()
            {
                Title = "Người mua",
                Name = "BuyerName",
                Value = Model.BuyerName,
                LabelCol = 4,
                Required = true,

            })
        
            @AppHelper.InputInline(new ControlAttribute()
           {
               Title = "Điện thoại",
               Name = "PhoneNumber",
               Value = Model.PhoneNumber,
               LabelCol = 4,
               Required = true,
@*             HasDefaultOption = true,
*@             @*List = groupSize.Select(x => new SelectOption { Text = x.Name, Value = x.Code + "" }).ToList()*@

           })


            @AppHelper.InputInline(new ControlAttribute()
            {
               Title = "Địa chỉ",
               Name = "AddressBuyer",
               Value = Model.AddressBuyer,
               LabelCol = 4,
               Required = true,
               @*HasDefaultOption = true,*@
               @*List = groupType.Select(x => new SelectOption { Text = x.Name, Value = x.Id + "" }).ToList()*@
           })


         @*@AppHelper.ComboDate(new ControlAttribute()*@
           <!--{
               Title = "Ngày bán",
               Name = "SoldDate",
               Value = Model.SoldDate.ToString(),
               LabelCol = 4,
               Required = true,-->
              @* HasDefaultOption = true,*@
              @* List = groupBrand.Select(x => new SelectOption { Text = x.Name, Value = x.Id + "" }).ToList()*@
           <!--})-->   
        </div>

        <div class="col-md-6">
           @AppHelper.SelectInline(new ControlAttribute()
           {
             Title = "Phương thức mua hàng",
             Name = "IsOnlineShop",
             Value = Model.IsOnlineShop + "",
             LabelCol = 4,
             Required = true,
             HasDefaultOption = true,
             List = groupShoppingMethods.Select(x => new SelectOption { Text = x.Name, Value = x.Code + "" }).ToList()
           })



                @AppHelper.SelectInline(new ControlAttribute()
                {
                   Title = "Trạng thái",
                   Name = "Status",
                   Value = Model.Status.ToString(),
                   LabelCol = 4,
                   Required = true,
                   HasDefaultOption = true,
                   List = groupStatus.Select(x => new SelectOption { Text = x.Name, Value = x.Code + "" }).ToList()

                })

                

        </div>

        
        
    <div class="col-md-12">
        <button class="btn btn-success" type="button" data-bind="click: AddReceiptRow">THÊM</button>
        <table class="table">
            <thead>
                <tr>
                    <th class="warning">STT</th>
                    <th class="warning" >Tên hàng hóa</th>
                    <th class="warning" >Đơn vị tính</th>
                    <th class="warning">Số lượng</th>
                    <th class="warning">Đơn giá</th>
                    <th class="warning">Thành tiền</th>
                    <th class="warning"></th>
                </tr>
            </thead>

            <tbody data-bind="foreach: ReceiptArray()">
                <tr data-bind="visible: status() == 0">
                    <td> </td>
                    <td> <input data-bind="value: clothesid" /></td>
                    <td> <input data-bind="value: unitmeasure"/></td>
                    <td> <input data-bind="value: ammount"/> </td>
                    <td> <input data-bind="value: price"/> </td>
                    <td> <input data-bind="value: finalprice"/> </td>
                    <td> <button class="btn btn-success" type="button" data-bind="click: DeleteReceiptRow">XÓA</button></td>
                </tr>
            </tbody>

        </table>
        <h3 class="col-md-offset-8">Tổng tiền hàng: <span data-bind ="text: totalprice"></span> </h3> 
        <button class="btn btn-rounded btn-primary" data-bind =" click: ShowTotalPrice">HIỂN THỊ TỔNG TIỀN</button>



    </div>

    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <button class="btn btn-sm btn-default form-cancel mr-10 btn-rounded" data-dismiss="modal">
                <i class="fa fa-remove"></i> THOÁT
            </button>
            <button class="btn btn-sm btn-fill btn-primary m-r-5 btn-submit btn-rounded" type="button"
                    data-loading-text="<i class='icon-spinner4 fa-spin'></i> Processing...">
                <i class="fa fa-save"></i> LƯU
            </button>
        </div>
    </div>
</form>

<script>
    
    

    var model = @Html.Raw(Json.Encode(Model));

    @*knockout*@
    var SoldCouponClass = () => {


        // this Initialization.
        self = this;


        // List.
        self.ReceiptArray = ko.observableArray();

        // Summation of each final price rows.
        self.totalprice = ko.observable();


        // New Row.
        var ReceiptRow = function (item) {
            var sr = this;
            {
                // Update method.
                if (item != null)
                {
                    sr.id = ko.observable(item.Id);
                    sr.clothesid = ko.observable(item.ClothesId);
                    sr.unitmeasure = ko.observable(item.UnitMeasure);
                    sr.ammount = ko.observable(item.Ammount);
                    sr.price = ko.observable(item.Price);
                    sr.finalprice = ko.observable(item.FinalPrice);
                    sr.status = ko.observable(item.Status);
                    console.log(item);
                }
                // Add method.
                else {
                    sr.id = 0;
                    sr.clothesid = ko.observable();
                    sr.unitmeasure = ko.observable("VND");
                    sr.ammount = ko.observable(0);
                    sr.price = ko.observable(1);
                    sr.finalprice = ko.observable();
                    sr.status = ko.observable(0);
                }
                
            }
        };




        // Add Method.
        self.AddReceiptRow = () => {
            var item = new ReceiptRow(null);
            self.ReceiptArray.push(item);
            console.log(item);
           
        };

        //Calculating total price and final price.
        self.realtime = ko.computed(
            () => {
                var Sum = 0;
                $(self.ReceiptArray()).each(function (index, element) {

                    if (element.status() == 0) {
                        element.finalprice(parseInt(element.ammount() * element.price()));


                        Sum += parseInt(element.finalprice());
                        self.totalprice(Sum);

                        console.log(element.finalprice());
                    }
                   
                   
                })


            }
        )

        // Delete method.
        self.DeleteReceiptRow = (item) => {
            item.status(-1);
            console.log(item.status());
            
            @*$.ajax({
                url: "/SoldCoupon/DeleteEachRowsOfReceipt",
                type: "GET",
                data: {},

            })*@
        };

        // Show Sum.
        self.ShowTotalPrice = () => {
            console.log(self.totalprice());
            console.log(ko.toJS(self.ReceiptArray));
        }

        //Show data when pressing Update button.
        self.init = () => {
            $.ajax({
                url: "/SoldCoupon/DetailReceiptEdit",
                type: "GET",
                data: { id: model.Id },
                success: (DetailReceiptData) => {
                    console.log(DetailReceiptData);

                    
                    $(DetailReceiptData.Many).each(
                        (index, item) => {
                            var row = new ReceiptRow(item);
                            self.ReceiptArray.push(row);
                         
                        }
                    )
                    
                }
            })
        }

        // Update method
        self.init();
    }
    




    function initSoldCouponForm(callback) {

        ko.applyBindings(SoldCouponClass, $("#SoldCouponForm")[0]);

        
        // Save button
        $('#SoldCouponForm').ultraForm({
            uiType: 1,
            action: '/SoldCoupon/SoldCouponEdit',
            actionType: 'ajax',
            props: [

                {
                    name: 'Id', type: 'hidden',
                },



                {
                    name: 'BuyerName', type: 'text',
                    required: {
                        message: "Thiếu tên khách hàng"
                    }
                },

                {
                    name: 'PhoneNumber',
                    type: 'text',
                    required: {
                        message: "Thiếu số điện thoại"
                    }
                },

                {
                    name: 'AddressBuyer',
                    type: 'text',
                    required: {
                        message: "Thiếu địa chỉ"
                    }
                },
@*
                {
                    name: 'SoldDate',
                    type: 'datetime',

                },*@

                {
                    name: 'IsOnlineShop',
                    type: 'select2',
                    option: {
                    },

                },

                {
                    name: 'Status',
                    type: 'select2',
                    option: {
                    },

                }



            ],
            @*initCallback: function (form) { },
            beforSubmit: function (form) { },
            afterSubmit: function (result) {
                if (result.Success) {
                    callback(result.Data);
                } else {
                    app.notify('warning', result.Message);
                }
            }*@

            autoSubmit: false,
            validCallback: (data, btn) => {
                data = app.formDataToJson(data);
                console.log(data);
                console.log('hello: ', ko.toJS( ReceiptArray() ) );


                $.ajax({
                    url: "/SoldCoupon/SoldCouponEdit",
                    type: "POST",
                    data: {
                        Id: data.Id,
                        BuyerName: data.BuyerName,
                        PhoneNumber: data.PhoneNumber,
                        Status: data.Status,
                        AddressBuyer: data.AddressBuyer,
                        detailReceipts: ko.toJS(ReceiptArray()),
                        TotalPrice: ko.toJS(totalprice()),
                        
                    },
                    success: () => {
                        callback(data);
                    }
                });

                
            }
        });

       
    }

   
    
</script>




