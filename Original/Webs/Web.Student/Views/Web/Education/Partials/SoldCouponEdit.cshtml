@using DBServer.Entities
@using Service.Core.Components
@using Service.Utility.Components
@using Service.Utility.Variables
@model  Service.Education.Executes.Clothesmn.SoldCoupons.SoldCouponViewModel


@{
   @* var groupSize = ViewData["SizeList"] as List<BaseItem>;

    var groupType = new List<TypeClothe>();
    using (var l = new DBServer.Entities.ServerDBContext())
    {
        groupType = l.TypeClothes.Where(x => x.Status >= 0).ToList();
    }


    var groupBrand = new List<Brand>();
    using (var l = new DBServer.Entities.ServerDBContext())
    {
        groupBrand = l.Brands.Where(x => x.Status >= 0).ToList();
    }*@

var groupStatus = ViewData["SoldCouponStatus"] as List<BaseItem>;
var groupShoppingMethods = ViewData["OptionsShopTable"] as List<BaseItem>;


}

<script>
    
</script>




<form id="SoldCouponForm" class="form form-horizontal">

    <input type="hidden" name="Id" value="@Model.Id" />

    <div class="row">
        <div class="col-md-6">

            @AppHelper.InputInline(new ControlAttribute()
            {
                Title = "Người mua",
                Name = "BuyerName",
                Value = "",
                LabelCol = 4,
                Required = true,

            })
        

         

        <div class="col-md-6">
           @AppHelper.SelectInline(new ControlAttribute()
           {
             Title = "Phương thức mua hàng",
             Name = "IsOnlineShop",
             Value = Model.IsOnlineShop + "",
             LabelCol = 4,
             Required = true,
             HasDefaultOption = true,
             List = groupShoppingMethods.Select(x => new SelectOption { Text = x.Name, Value = x.Code + "" }).ToList()
           })



              @*  @AppHelper.SelectInline(new ControlAttribute()
                {
                   Title = "Trạng thái",
                   Name = "Status",
                   Value = Model.Status.ToString(),
                   LabelCol = 4,
                   Required = true,
                   HasDefaultOption = true,
                   List = groupStatus.Select(x => new SelectOption { Text = x.Name, Value = x.Code + "" }).ToList()

                })
*@
                

        </div>

        
        
    <div class="col-md-12">
        <button class="btn btn-success" type="button" data-bind="click: AddReceiptRow" style="margin-bottom: 30px; width: 70px; height: 40px;"><i class="fa fa-plus"></i> THÊM </button>
        <table class="table">
            <thead>
                <tr>
                    <th class="warning"></th>
                    <th class="warning">Tên hàng hóa</th>
                    <th class="warning">Đơn vị tính</th>
                    <th class="warning">Số lượng</th>
                    <th class="warning">Đơn giá</th>
                    <th class="warning">Thành tiền</th>
                    <th class="warning"></th>
                </tr>
            </thead>

            <tbody data-bind="foreach: ReceiptArray()">
                <tr data-bind="visible: Status() == 0">
                    <td> </td>
                    <td> <input data-bind="attr: { Id: 'selectid_' + guid } " /></td>
                    <td> <label data-bind="text: UnitMeasure" /></td>
                    <td> <input data-bind="value: Ammount" style="width: 90px;" type="number" class="form-control" min="1" max="99999" step="1" pattern="\d+"/> </td>
                    <td> <label data-bind="text: Price" /> </td>
                    <td> <label data-bind="text: FinalPrice" /> </td>
                    <td> <button class="btn btn-success" type="button" data-bind="click: DeleteReceiptRow">XÓA</button></td>
                </tr>
            </tbody>

        </table>
        <h3 class="col-md-offset-8">Tổng tiền hàng: <span data-bind ="text: totalpricestr"></span> </h3> 
        <button class="btn btn-rounded btn-primary" data-bind =" click: ShowTotalPrice"></button>



    </div>

            </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <button class="btn btn-sm btn-default form-cancel mr-10 btn-rounded" data-dismiss="modal">
                <i class="fa fa-remove"></i> THOÁT
            </button>
            <button class="btn btn-sm btn-fill btn-danger m-r-5 btn-submit btn-rounded" type="button"
                    data-loading-text="<i class='icon-spinner4 fa-spin'></i> Processing..." value= "1">
                <i class="fa fa-save"></i> CHỐT ĐƠN
            </button>

            <button class="btn btn-sm btn-fill btn-primary m-r-5 btn-submit btn-rounded" type="button" data-loading-text="<i class='icon-spinner4 fa-spin'></i> Processing..." value = "2" > <i class="fa fa-pencil fa-fw"></i>LƯU TẠM</button>
        </div>
    </div>
</form>

<script>
    
    

    var model = @Html.Raw(Json.Encode(Model));

    @*knockout*@
    var SoldCouponClass = () => {


        // this Initialization.
        self = this;


        // List.
        self.ReceiptArray = ko.observableArray();

        // Summation of each final price rows.
        self.TotalPrice = ko.observable();
        self.otalpricestr = ko.observable("");

        // Clothes's Properties.
        self.clothesname = ko.observableArray();

        // Guid.
        
        

        // Detail Receipt's Properties.
       
        
        // Data from ClothesId.
       @* $.getJSON 
        (
            "/Clothes/ViewClothList",

            (data) => {
                self.clothesname = ko.observableArray(data.Many);
                console.log("Clothes name: ", self.clothesname());
            }

        )*@

        

        // New Row.
        self.ReceiptRow = function (item) {
            var sr = this;
            
            
                // Update method.
                if (item != null)
                {
                    sr.guid = app.newGuid();
                    sr.Id = item.Id;
                    sr.ClothesId = ko.observable(item.ClothesId);
                    sr.UnitMeasure = ko.observable(item.UnitMeasure);
                    sr.Ammount = ko.observable(item.Ammount);
                    sr.Price = ko.observable(item.Price);
                    sr.FinalPrice = ko.observable(item.FinalPrice);
                    sr.Status = ko.observable(item.Status);
                    
                    console.log(item);


                    
                }
                // Add method.
                else {
                    sr.guid = app.newGuid();
                    sr.Id = 0;
                    sr.ClothesId = ko.observable(0);
                    sr.UnitMeasure = ko.observable("Cái");
                    sr.Ammount = ko.observable(0);
                    sr.Price = ko.observable(1);
                    sr.FinalPrice = ko.observable();
                    sr.Status = ko.observable(0);
                    
                }

               
            console.log('Clothesid: ' + sr.clothesid());
            
            setTimeout(function () {
                
                
                $('#selectid_' + sr.guid).select2({
                    width: 200,
                    ajax: {
                        url: "/Clothes/ViewClothList",
                        type: "GET",
                        dataType: 'json',
                        quietMillis: 100,
                        data: function (term, page) {

                            return {
                                keyword: term,
                                allStatus: true
                            }

                        },
                        results: function (k) {
                            console.log("result: ", k);



                            var clothname = [];
                            $(k.Many).each(
                                function () {
                                            clothname.push({
                                                id: this.Id,
                                                text: this.Name,
                                                clothprice: this.Price
                                            });
                                    @*self.clothesname.push({ id: this.Id, text: this.Name, clothprice: this.Price });*@
                                }

                            );
                                    @*self.clothesname(k.Many);*@
                           @* console.log("Array of Clothes: ", self.clothesname());
                            console.log("First element of Array of Clothes: ", self.clothesname()[0].id);
                            console.log("First name of first element of Array of Clothes: ", self.clothesname()[0].text);
                            console.log("clothesid ", sr.clothesid());
                            
                            var b = "";
                            self.clothesname().forEach(function (value) { if (value.id == sr.clothesid()) { b = value.text + ""; } });
                                    console.log("value: ", b);*@
                            return { results: clothname };

                        }
                    },

                    initSelection: function (element, callback) {
                        
                        return callback({ text: element.val() });


                    },

                        }).change(function (v) {
                            console.log('check:', v);
                            sr.price(v.added.clothprice);
                            console.log('Id: ', this.id);
                            console.log('v.val: ', v.val);
                            console.log('v.Id: ', v.added.id);
                            sr.clothesid(v.val);
                            
                            @*self.clothesname(v.added.name);*@
                            
                            @*if (this.id == v.val) {
                                sr.price(v.added.clothprice);


                            }*@
                           @* $(clothesname).each(function (item) {

                                console.log("Id cua clothesname: ", this.id);

                            }) *@

                            

                            
                        })
                    
                        if (sr.id > 0) {
                            $.getJSON
                            (
                                "/Clothes/ViewClothList",

                                (data) => {
                                    self.clothesname(data.Many);
                                    console.log("Clothes name: ", self.clothesname());
                                    console.log("Check id : ", sr.ClothesId());
                                    var b = "";
                                    console.log("Clothes : ", self.clothesname());
                                    self.clothesname().forEach(function (value) { if (value.Id == sr.ClothesId()) { b = value.Name}; });
                                    console.log("value of b: ", b);
                                    $("#selectid_" + sr.guid).select2('val', b);
                                }

                            )
                            
                            

                                
                        }   
                   

                    }, 200);
            
            

            @*sr.clothesid.subscribe(() => {
                if (typeof sr.clothesid() != "undefined") {
                    item = self.clothesname().filter(x => x.Id == sr.clothesid().Id);
                    console.log('>> ', sr.clothesid().Id);
                    console.log('xuat item', item);
                    console.log("Price of cloth: " + item[0].Price);
                    console.log("Price of cloth array: " + sr.price());
                    sr.price(item[0].Price);

                }
            });*@


            // Select2
            
        };




        // Add Method.
        self.AddReceiptRow = () => {
            var item = new ReceiptRow(null);
            self.ReceiptArray.push(item);
            console.log(item);
           
        };

        //Calculating total price and final price.
        self.realtime = ko.computed(
            () => {
                var Sum = 0;
                $(self.ReceiptArray()).each(function (index, element) {
                    // Save.
                    if (element.Status() == 0) {
                        element.FinalPrice(parseInt(element.Ammount() * element.Price()));


                        Sum += parseInt(element.FinalPrice());
                        self.TotalPrice(Sum);
                        app.formatPrice(Sum);
                        self.TotalPricestr(app.formatPrice(Sum));
                        console.log(element.FinalPrice());
                    }
                    
                   
                   
                   
                   
                   
                })


            }
        )

        // Delete method.
        self.DeleteReceiptRow = (item) => {
            item.Status(-1);
            console.log(item.Status());
            
            @*$.ajax({
                url: "/SoldCoupon/DeleteEachRowsOfReceipt",
                type: "GET",
                data: {},

            })*@
        };

        // Show Sum.
        self.ShowTotalPrice = () => {
            console.log(self.TotalPrice());
            console.log(ko.toJS(self.ReceiptArray));
        }

        //Show data when pressing Update button.
        self.init = () => {
            $.ajax({
                url: "/SoldCoupon/DetailReceiptEdit",
                type: "GET",
                data: { id: model.Id },
                success: (DetailReceiptData) => {
                    console.log('detail: ', DetailReceiptData);

                    
                    $(DetailReceiptData.Many).each(
                        (index, item) => {
                            var row = new ReceiptRow(item);
                            self.ReceiptArray.push(row);
                         
                        }
                    )
                    
                }
            })
        }

        // Update method
        self.init();

        
       
    }
    




    function initSoldCouponForm(callback) {

        ko.applyBindings(SoldCouponClass, $("#SoldCouponForm")[0]);

        
        // Save button
        $('#SoldCouponForm').ultraForm({
            uiType: 1,
            action: '/SoldCoupon/SoldCouponEdit',
            actionType: 'ajax',
            props: [

                {
                    name: 'Id', type: 'hidden',
                },



                {
                    name: 'BuyerName', type: 'select2',
                    option: {
                        ajax: {
                            url: '/Customer/ViewCustomerList',
                            type: 'GET',
                            quietMillis:250,
                            data:  function (term, page)  {

                                    return {
                                        keyword: term,
                                        allStatus: true
                                    }

                            },
                            results: function (x, page) { console.log("customer: ", x)
                                var data = [];
                                $(x.Many).each(
                                    function () {
                                        data.push({
                                            id: this.Id,
                                            text: this.Name
                                        });

                                    }
                                );
                                return { results: data };
                            }

                                

                        }
                        
                    },
                    required: {
                        message: "Thiếu tên khách hàng"
                    },

                    
                },

             

                {
                    name: 'SoldDate',
                    type: 'datetime',

                },

                {
                    name: 'IsOnlineShop',
                    type: 'select2',
                    option: {
                    },

                },

               @* {
                    name: 'Status',
                    type: 'select2',
                    option: {
                    },

                }*@



            ],
            @*initCallback: function (form) { },
            beforSubmit: function (form) { },
            afterSubmit: function (result) {
                if (result.Success) {
                    callback(result.Data);
                } else {
                    app.notify('warning', result.Message);
                }
            }*@
            @*Delete *@
            autoSubmit: false,
            validCallback: (data, btn) => {
                data = app.formDataToJson(data);
                console.log(data);
                console.log('hello: ', ko.toJS( ReceiptArray() ) );
                var value = btn.attr('value');

                $.ajax({
                    url: "/SoldCoupon/SoldCouponEdit",
                    type: "POST",
                    data: {
                        Id: data.Id,
                        BuyerName: data.BuyerName,
                        PhoneNumber: data.PhoneNumber,
                        Status: value,
                        AddressBuyer: data.AddressBuyer,
                        detailReceipts: ko.toJS(ReceiptArray()),
                        TotalPrice: ko.toJS(TotalPrice()),
                        IsOnlineShop: data.IsOnlineShop,
                        
                    },
                    success: () => {
                        callback(data);
                    }
                });

                
            }
        });

        if (model.Id > 0) {
            app.setSelect2Data(
                $('#SoldCouponForm input[name="BuyerName"]'),
                {
                    id: model.ObjNameBuyer.Id,
                    text: model.ObjNameBuyer.Name
                }

            )
        }
    }

   
    
</script>




