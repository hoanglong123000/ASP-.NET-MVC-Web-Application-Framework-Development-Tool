@using DBServer.Entities
@using Service.Core.Components
@using Service.Utility.Components
@using Service.Utility.Variables
@model  Service.Education.Executes.Clothesmn.ImportedCoupons.ImportedCouponViewModel


@{
    @* var groupSize = ViewData["SizeList"] as List<BaseItem>;

        var groupType = new List<TypeClothe>();
        using (var l = new DBServer.Entities.ServerDBContext())
        {
            groupType = l.TypeClothes.Where(x => x.Status >= 0).ToList();
        }


        var groupBrand = new List<Brand>();
        using (var l = new DBServer.Entities.ServerDBContext())
        {
            groupBrand = l.Brands.Where(x => x.Status >= 0).ToList();
        }*@

    var groupStatus = ViewData["StatusImportedList"] as List<BaseItem>;
    


}

<script>

</script>




<form id="ImportedCouponForm" class="form form-horizontal">

    <input type="hidden" name="id" value="@Model.Id" />

    <div class="row">
        <div class="col-md-6">

            @AppHelper.InputInline(new ControlAttribute()
            {
                Title = "Nhà cung cấp",
                Name = "ProviderId",
                Value = "",
                LabelCol = 4,
                Required = true,

            })
        </div>
            <div class="col-md-6">
                @AppHelper.InputInline(new ControlAttribute()
                {
                  Title = "Ghi chú",
                  Name = "Note",
                  Value = Model.Note + "",
                  LabelCol = 4,
                  Required = true,
                  
            
                })
            </div>


   
        



            <div class="col-md-12">
                <button class="btn btn-success" type="button" data-bind="click: AddImportedReceiptRow" style="margin-bottom: 30px; width: 70px; height: 40px;"><i class="fa fa-plus"></i> THÊM </button>
                <table class="table">
                    <thead>
                        <tr>
                            <th class="warning"></th>
                            <th class="warning">Tên hàng hóa</th>
                            <th class="warning">Đơn vị tính</th>
                            <th class="warning">Số lượng</th>
                            <th class="warning">Giá nhập hàng</th>
                            <th class="warning">Thành tiền</th>
                            <th class="warning"></th>
                        </tr>
                    </thead>

                    <tbody data-bind="foreach: ImportedReceiptArray()">
                        <tr data-bind="visible: Status() == 0">
                            <td> </td>
                            <td> <input data-bind="attr: { Id: 'selectid_' + Guid } " /></td>
                            <td> <label data-bind="text: UnitMeasure" /></td>
                            <td> <input data-bind="value: Amount" style="width: 90px;" type="number" min="1" max="99999" step="1" pattern="\d+" onchange="this.value = parseInt(this.value);"/> </td>
                            <td> <label data-bind="text: Price" /> </td>
                            <td> <label data-bind="text: FinalPrice" /> </td>
                            <td> <button class="btn btn-success" type="button" data-bind="click: DeleteImportedReceiptRow">XÓA</button></td>
                        </tr>
                    </tbody>

                </table>
                <h3 class="col-md-offset-8">Tổng tiền hàng: <span data-bind="text: TotalPricestr"></span> </h3>
                <button class="btn btn-rounded btn-primary" data-bind=" click: ShowTotalPrice"></button>



            </div>

        </div>

        <div class="row">
            <div class="col-md-12 text-right">
                <button class="btn btn-sm btn-default form-cancel mr-10 btn-rounded" data-dismiss="modal">
                    <i class="fa fa-remove"></i> THOÁT
                </button>
                <button class="btn btn-sm btn-fill btn-danger m-r-5 btn-submit btn-rounded" type="button"
                        data-loading-text="<i class='icon-spinner4 fa-spin'></i> Processing..." value="1">
                    <i class="fa fa-save"></i> CHỐT NHẬP
                </button>

                <button class="btn btn-sm btn-fill btn-primary m-r-5 btn-submit btn-rounded" type="button" data-loading-text="<i class='icon-spinner4 fa-spin'></i> Processing..." value="2"> <i class="fa fa-pencil fa-fw"></i>LƯU TẠM</button>
            </div>
        </div>
    
</form>

<script>



    var model = @Html.Raw(Json.Encode(Model));

    @*knockout*@
    var ImportedCouponClass = () => {


        // this Initialization.
        self = this;


        // List.
        self.ImportedReceiptArray = ko.observableArray();

        // Summation of each final Price rows.
        self.TotalPrice = ko.observable(0);
        self.TotalPricestr = ko.observable("");

        // Clothes's Properties.
        self.clothesname = ko.observableArray();

        // Guid.



        // Detail Receipt's Properties.


        // Data from ClothesId.
       @* $.getJSON
        (
            "/Clothes/ViewClothList",

            (data) => {
                self.clothesname = ko.observableArray(data.Many);
                console.log("Clothes name: ", self.clothesname());
            }

        )*@



        // New Row.
        self.ImportedReceiptRow = function (item) {
            var sr = this;


                // Update method.
                if (item != null)
                {
                    sr.Guid = app.newGuid();
                    sr.Id = item.Id;
                    sr.ClothesId = ko.observable(item.ClothesId);
                    sr.UnitMeasure = ko.observable(item.UnitMeasure);
                    sr.Amount = ko.observable(item.Amount);
                    sr.Price = ko.observable(item.Price);
                    sr.FinalPrice = ko.observable(item.FinalPrice);
                    sr.Status = ko.observable(item.Status);

                    console.log(item);



                }
                // Add method.
                else {
                    sr.Guid = app.newGuid();
                    sr.Id = 0;
                    sr.ClothesId = ko.observable(0);
                    sr.UnitMeasure = ko.observable("Cái");
                    sr.Amount = ko.observable(1);
                    sr.Price = ko.observable(1);
                    sr.FinalPrice = ko.observable(0);
                    sr.Status = ko.observable(0);

                }


            console.log('ClothesId: ' + sr.ClothesId());

            setTimeout(function () {


                $('#selectid_' + sr.Guid).select2({
                    width: 200,
                    ajax: {
                        url: "/Clothes/ViewClothList",
                        type: "GET",
                        dataType: 'json',
                        quietMillis: 100,
                        data: function (term, page) {

                            return {
                                keyword: term,
                                allStatus: true
                            }

                        },
                        results: function (k) {
                            console.log("result: ", k);



                            var clothname = [];
                            $(k.Many).each(
                                function () {
                                            clothname.push({
                                                id: this.Id,
                                                text: this.Name,
                                                clothprice: this.Price
                                            });
                                    @*self.clothesname.push({ Id: this.Id, text: this.Name, clothPrice: this.Price });*@
                                }

                            );
                                    @*self.clothesname(k.Many);*@
                           @* console.log("Array of Clothes: ", self.clothesname());
                            console.log("First element of Array of Clothes: ", self.clothesname()[0].Id);
                            console.log("First name of first element of Array of Clothes: ", self.clothesname()[0].text);
                            console.log("ClothesId ", sr.ClothesId());

                            var b = "";
                            self.clothesname().forEach(function (value) { if (value.Id == sr.ClothesId()) { b = value.text + ""; } });
                                    console.log("value: ", b);*@
                            return { results: clothname };

                        }
                    },

                    initSelection: function (element, callback) {

                        return callback({ text: element.val() });


                    },

                        }).change(function (v) {
                            console.log('check:', v);
                            sr.Price(v.added.clothprice);
                            console.log('Id: ', this.id);
                            console.log('v.val: ', v.val);
                            console.log('v.Id: ', v.added.id);
                            sr.ClothesId(v.val);

                            @*self.clothesname(v.added.name);*@

                            @*if (this.Id == v.val) {
                                sr.Price(v.added.clothPrice);


                            }*@
                           @* $(clothesname).each(function (item) {

                                console.log("Id cua clothesname: ", this.Id);

                            }) *@




                        })

                        if (sr.Id > 0) {
                            $.getJSON
                            (
                                "/Clothes/ViewClothList",

                                (data) => {
                                    self.clothesname(data.Many);
                                    console.log("Clothes name: ", self.clothesname());
                                    console.log("Check id : ", sr.ClothesId());
                                    var b = "";
                                    console.log("Clothes : ", self.clothesname());
                                    self.clothesname().forEach(function (value) { if (value.Id == sr.ClothesId()) { b = value.Name}; });
                                    console.log("value of b: ", b);
                                    $("#selectid_" + sr.Guid).select2('val', b);
                                }

                            )




                        }


                    }, 200);



            @*sr.ClothesId.subscribe(() => {
                if (typeof sr.ClothesId() != "undefined") {
                    item = self.clothesname().filter(x => x.Id == sr.ClothesId().Id);
                    console.log('>> ', sr.ClothesId().Id);
                    console.log('xuat item', item);
                    console.log("Price of cloth: " + item[0].Price);
                    console.log("Price of cloth array: " + sr.Price());
                    sr.Price(item[0].Price);

                }
            });*@


            // Select2

        };




        // Add Method.
        self.AddImportedReceiptRow = () => {
            var item = new ImportedReceiptRow(null);
            self.ImportedReceiptArray.push(item);
            console.log(item);

        };

        //Calculating total Price and final Price.
        self.realtime = ko.computed(
            () => {
                var Sum = 0;
                $(self.ImportedReceiptArray()).each(function (index, element) {
                    // Save.
                    if (element.Status() == 0) {
                        element.FinalPrice(parseInt(element.Amount() * element.Price()));


                        Sum += parseInt(element.FinalPrice());
                        self.TotalPrice(Sum);
                        app.formatPrice(Sum);
                        self.TotalPricestr(app.formatPrice(Sum));
                        console.log(element.FinalPrice());

                    }



                })


            }
        )

        // Delete method.
        self.DeleteImportedReceiptRow = (item) => {
            item.Status(-1);
            console.log(item.Status());

            @*$.ajax({
                url: "/SoldCoupon/DeleteEachRowsOfReceipt",
                type: "GET",
                data: {},

            })*@
        };

        // Show Sum.
        self.ShowTotalPrice = () => {
            console.log(self.TotalPrice());
            console.log(ko.toJS(self.ImportedReceiptArray));
        }

        //Show data when pressing Update button.
        self.init = () => {
            $.ajax({
                url: "/ImportedCoupon/DetailImportedReceiptEdit",
                type: "GET",
                data: { id: model.Id },
                success: (DetailImportedReceiptData) => {
                    console.log('detail: ', DetailImportedReceiptData);


                    $(DetailImportedReceiptData.Many).each(
                        (index, item) => {
                            var row = new ImportedReceiptRow(item);
                            self.ImportedReceiptArray.push(row);

                        }
                    )

                }
            })
        }

        // Update method
        self.init();



    }





    function initImportedCouponForm(callback) {

        ko.applyBindings(ImportedCouponClass, $("#ImportedCouponForm")[0]);


        // Save button
        $('#ImportedCouponForm').ultraForm({
            uiType: 1,
            action: '/ImportedCoupon/ImportedCouponEdit',
            actionType: 'ajax',
            props: [

                {
                    name: 'Id', type: 'hidden',
                },



                {
                    name: 'ProviderId', type: 'select2',
                    option: {
                        ajax: {
                            url: '/Provider/ViewProviderList',
                            type: 'GET',
                            quietMillis:250,
                            data:  function (term, page)  {

                                    return {
                                        keyword: term,
                                        allStatus: true
                                    }

                            },
                            results: function (x, page) { console.log("Provider: ", x)
                                var data = [];
                                $(x.Many).each(
                                    function () {
                                        data.push({
                                            id: this.Id,
                                            text: this.Name
                                        });

                                    }
                                );
                                return { results: data };
                            }



                        }

                    },
                    required: {
                        message: "Thiếu tên khách hàng"
                    },


                },



                {
                    name: 'ImportedDate',
                    type: 'datetime',

                },

                {
                    name: 'Note',
                    type: 'text',
                    option: {
                    },

                },

               @* {
                    name: 'Status',
                    type: 'select2',
                    option: {
                    },

                }*@



            ],
            @*initCallback: function (form) { },
            beforSubmit: function (form) { },
            afterSubmit: function (result) {
                if (result.Success) {
                    callback(result.Data);
                } else {
                    app.notify('warning', result.Message);
                }
            }*@
            @*Delete *@
            autoSubmit: false,
            validCallback: (data, btn) => {
                data = app.formDataToJson(data);
                console.log(data);
                console.log('hello: ', ko.toJS( ImportedReceiptArray() ) );
                var value = btn.attr('value');

                $.ajax({
                    url: "/ImportedCoupon/ImportedCouponEdit",
                    type: "POST",
                    data: {
                        Id: data.Id,
                        ProviderId: data.ProviderId,
                        ImportedDate: data.ImportedDate,
                        Status: value,
                        Note: data.Note,
                        detailImportedReceipts: ko.toJS(ImportedReceiptArray()),
                        TotalPrice: ko.toJS(TotalPrice()),

                        

                    },
                    success: () => {
                        callback(data);
                    }
                });


            }
        });

        if (model.Id > 0) {
            app.setSelect2Data(
                $('#ImportedCouponForm input[name="ProviderId"]'),
                {
                    id: model.ObjProviderId.Id,
                    text: model.ObjProviderId.Name
                }

            )
        }
    }



</script>




